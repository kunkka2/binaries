name: Termusic release copy
on:
  workflow_dispatch:

env:
  BIN_NAME: termusic
  BIN_NAME_SERVER: termusic-server 
  PROJECT_NAME: termusic 
  REPO_NAME: tramhao/termusic
  # BREW_TAP: jondot/homebrew-tap

jobs:
  dist:
    name: Dist
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [aarch64-linux ] #,aarch64-macos] #, aarch64-linux, x86_64-macos, x86_64-windows] #, x86_64-win-gnu, win32-msvc
        include:
        - build: aarch64-linux
          os: ubuntu-20.04
          rust: stable
          target: aarch64-unknown-linux-gnu
          cross: true
        

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          repository: 'mokeyish/smartdns-rs'
          submodules: true

      - name: Install ${{ matrix.rust }} toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      

      - name: Install cross (cross)
        if: matrix.cross
        run: cargo install cross



      - name: Build release binary (cross)
        if: matrix.cross
        run: cargo build --features cover,all-backends --release --all --locked --target ${{ matrix.target }}


      - name: Strip release binary (arm)
        if: matrix.build == 'aarch64-linux'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:${{ matrix.target }} \
            aarch64-linux-gnu-strip \
            /target/${{ matrix.target }}/release/$BIN_NAME
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:${{ matrix.target }} \
            aarch64-linux-gnu-strip \
            /target/${{ matrix.target }}/release/$BIN_NAME_SERVER

      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          cp "target/${{ matrix.target }}/release/$BIN_NAME_SERVER" "dist/"

      - uses: actions/upload-artifact@v2.2.4
        with:
          name: bins-${{ matrix.build }}
          path: dist

  publish:
    name: Publish
    needs: [dist]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: false

      - uses: actions/download-artifact@v2
        # with:
        #   path: dist
      # - run: ls -al ./dist
      - run: ls -al bins-*

      # - uses: actions/download-artifact@v2
      #   # with:
      #   windowspath: dist
      # - runchoco install protoc ls -al ./dist
      - name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo ::set-output name=val::$name
          echo TAG=$name >> $GITHUB_ENV
        id: tagname

      - name: Build archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          mkdir dist

          for dir in bins-* ; do
              platform=${dir#"bins-"}
              
              pkgname=$PROJECT_NAME-$TAG-$platform
              mkdir tmp/$pkgname
              cp LICENSE_MIT README.md tmp/$pkgname
              mv bins-$platform/$BIN_NAME$exe tmp/$pkgname
              mv bins-$platform/$BIN_NAME_SERVER$exe tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME$exe
              chmod +x tmp/$pkgname/$BIN_NAME_SERVER$exe

              cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname
          done

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true

      - name: Extract version
        id: extract-version
        run: |
          printf "::set-output name=%s::%s\n" tag-name "${GITHUB_REF#refs/tags/}"

      # - uses: mislav/bump-homebrew-formula-action@v1
      #   with:
      #     formula-path: ${{env.PROJECT_NAME}}.rb
      #     homebrew-tap: ${{ env.BREW_TAP }}
      #     download-url: "https://github.com/${{ env.REPO_NAME }}/releases/download/${{ steps.extract-version.outputs.tag-name }}/${{env.PROJECT_NAME}}-${{ steps.extract-version.outputs.tag-name }}-x86_64-macos.tar.xz"
      #     commit-message: updating formula for ${{ env.PROJECT_NAME }}
      #   env:
      #     COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
        #
        # you can use this initial file in your homebrew-tap if you don't have an initial formula:
        # <projectname>.rb
        #
        # class <Projectname capitalized> < Formula
        #   desc "A test formula"
        #   homepage "http://www.example.com"
        #   url "-----"
        #   version "-----"
        #   sha256 "-----"

        #   def install
        #     bin.install "<bin-name>"
        #   end
        # end
